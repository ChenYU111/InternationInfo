package com.internation.info.dao;

import com.internation.info.model.Review;
import com.internation.info.model.ReviewExample.Criteria;
import com.internation.info.model.ReviewExample.Criterion;
import com.internation.info.model.ReviewExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class ReviewSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String countByExample(ReviewExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("review");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String deleteByExample(ReviewExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("review");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String insertSelective(Review record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("review");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getArticle_title() != null) {
            sql.VALUES("article_title", "#{article_title,jdbcType=VARCHAR}");
        }
        
        if (record.getAuthorId() != null) {
            sql.VALUES("authorId", "#{authorId,jdbcType=INTEGER}");
        }
        
        if (record.getObserver_id() != null) {
            sql.VALUES("observer_id", "#{observer_id,jdbcType=INTEGER}");
        }
        
        if (record.getArticle_id() != null) {
            sql.VALUES("article_id", "#{article_id,jdbcType=INTEGER}");
        }
        
        if (record.getMessage() != null) {
            sql.VALUES("message", "#{message,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("createTime", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFloor_number() != null) {
            sql.VALUES("floor_number", "#{floor_number,jdbcType=INTEGER}");
        }
        
        if (record.getLike_number() != null) {
            sql.VALUES("like_number", "#{like_number,jdbcType=INTEGER}");
        }
        
        if (record.getUnlike_number() != null) {
            sql.VALUES("unlike_number", "#{unlike_number,jdbcType=INTEGER}");
        }
        
        if (record.getSeecount() != null) {
            sql.VALUES("seecount", "#{seecount,jdbcType=INTEGER}");
        }
        
        if (record.getIsRevert() != null) {
            sql.VALUES("isRevert", "#{isRevert,jdbcType=INTEGER}");
        }
        
        if (record.getRevertfloor() != null) {
            sql.VALUES("revertfloor", "#{revertfloor,jdbcType=INTEGER}");
        }
        
        if (record.getRevert() != null) {
            sql.VALUES("revert", "#{revert,jdbcType=VARCHAR}");
        }
        
        if (record.getRevertUid() != null) {
            sql.VALUES("revertUid", "#{revertUid,jdbcType=INTEGER}");
        }
        
        if (record.getRevertCreateTime() != null) {
            sql.VALUES("revertCreateTime", "#{revertCreateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String selectByExample(ReviewExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("article_title");
        sql.SELECT("authorId");
        sql.SELECT("observer_id");
        sql.SELECT("article_id");
        sql.SELECT("message");
        sql.SELECT("createTime");
        sql.SELECT("floor_number");
        sql.SELECT("like_number");
        sql.SELECT("unlike_number");
        sql.SELECT("seecount");
        sql.SELECT("isRevert");
        sql.SELECT("revertfloor");
        sql.SELECT("revert");
        sql.SELECT("revertUid");
        sql.SELECT("revertCreateTime");
        sql.FROM("review");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Review record = (Review) parameter.get("record");
        ReviewExample example = (ReviewExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("review");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getArticle_title() != null) {
            sql.SET("article_title = #{record.article_title,jdbcType=VARCHAR}");
        }
        
        if (record.getAuthorId() != null) {
            sql.SET("authorId = #{record.authorId,jdbcType=INTEGER}");
        }
        
        if (record.getObserver_id() != null) {
            sql.SET("observer_id = #{record.observer_id,jdbcType=INTEGER}");
        }
        
        if (record.getArticle_id() != null) {
            sql.SET("article_id = #{record.article_id,jdbcType=INTEGER}");
        }
        
        if (record.getMessage() != null) {
            sql.SET("message = #{record.message,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("createTime = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFloor_number() != null) {
            sql.SET("floor_number = #{record.floor_number,jdbcType=INTEGER}");
        }
        
        if (record.getLike_number() != null) {
            sql.SET("like_number = #{record.like_number,jdbcType=INTEGER}");
        }
        
        if (record.getUnlike_number() != null) {
            sql.SET("unlike_number = #{record.unlike_number,jdbcType=INTEGER}");
        }
        
        if (record.getSeecount() != null) {
            sql.SET("seecount = #{record.seecount,jdbcType=INTEGER}");
        }
        
        if (record.getIsRevert() != null) {
            sql.SET("isRevert = #{record.isRevert,jdbcType=INTEGER}");
        }
        
        if (record.getRevertfloor() != null) {
            sql.SET("revertfloor = #{record.revertfloor,jdbcType=INTEGER}");
        }
        
        if (record.getRevert() != null) {
            sql.SET("revert = #{record.revert,jdbcType=VARCHAR}");
        }
        
        if (record.getRevertUid() != null) {
            sql.SET("revertUid = #{record.revertUid,jdbcType=INTEGER}");
        }
        
        if (record.getRevertCreateTime() != null) {
            sql.SET("revertCreateTime = #{record.revertCreateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("review");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("article_title = #{record.article_title,jdbcType=VARCHAR}");
        sql.SET("authorId = #{record.authorId,jdbcType=INTEGER}");
        sql.SET("observer_id = #{record.observer_id,jdbcType=INTEGER}");
        sql.SET("article_id = #{record.article_id,jdbcType=INTEGER}");
        sql.SET("message = #{record.message,jdbcType=VARCHAR}");
        sql.SET("createTime = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("floor_number = #{record.floor_number,jdbcType=INTEGER}");
        sql.SET("like_number = #{record.like_number,jdbcType=INTEGER}");
        sql.SET("unlike_number = #{record.unlike_number,jdbcType=INTEGER}");
        sql.SET("seecount = #{record.seecount,jdbcType=INTEGER}");
        sql.SET("isRevert = #{record.isRevert,jdbcType=INTEGER}");
        sql.SET("revertfloor = #{record.revertfloor,jdbcType=INTEGER}");
        sql.SET("revert = #{record.revert,jdbcType=VARCHAR}");
        sql.SET("revertUid = #{record.revertUid,jdbcType=INTEGER}");
        sql.SET("revertCreateTime = #{record.revertCreateTime,jdbcType=TIMESTAMP}");
        
        ReviewExample example = (ReviewExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    public String updateByPrimaryKeySelective(Review record) {
        SQL sql = new SQL();
        sql.UPDATE("review");
        
        if (record.getArticle_title() != null) {
            sql.SET("article_title = #{article_title,jdbcType=VARCHAR}");
        }
        
        if (record.getAuthorId() != null) {
            sql.SET("authorId = #{authorId,jdbcType=INTEGER}");
        }
        
        if (record.getObserver_id() != null) {
            sql.SET("observer_id = #{observer_id,jdbcType=INTEGER}");
        }
        
        if (record.getArticle_id() != null) {
            sql.SET("article_id = #{article_id,jdbcType=INTEGER}");
        }
        
        if (record.getMessage() != null) {
            sql.SET("message = #{message,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("createTime = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFloor_number() != null) {
            sql.SET("floor_number = #{floor_number,jdbcType=INTEGER}");
        }
        
        if (record.getLike_number() != null) {
            sql.SET("like_number = #{like_number,jdbcType=INTEGER}");
        }
        
        if (record.getUnlike_number() != null) {
            sql.SET("unlike_number = #{unlike_number,jdbcType=INTEGER}");
        }
        
        if (record.getSeecount() != null) {
            sql.SET("seecount = #{seecount,jdbcType=INTEGER}");
        }
        
        if (record.getIsRevert() != null) {
            sql.SET("isRevert = #{isRevert,jdbcType=INTEGER}");
        }
        
        if (record.getRevertfloor() != null) {
            sql.SET("revertfloor = #{revertfloor,jdbcType=INTEGER}");
        }
        
        if (record.getRevert() != null) {
            sql.SET("revert = #{revert,jdbcType=VARCHAR}");
        }
        
        if (record.getRevertUid() != null) {
            sql.SET("revertUid = #{revertUid,jdbcType=INTEGER}");
        }
        
        if (record.getRevertCreateTime() != null) {
            sql.SET("revertCreateTime = #{revertCreateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table review
     *
     * @mbggenerated Sun Apr 22 20:06:21 CST 2018
     */
    protected void applyWhere(SQL sql, ReviewExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}